{-# LANGUAGE DataKinds #-}
{-# LANGUAGE KindSignatures #-}

-- | This module introduces 'Field', a newtype wrapper for named record fields,
-- assuming a naming convention that adds a prefix to each record field name.
-- Consider this record:
--
-- @
-- data User =
--   MkUser { _userId :: UUID,
--            _userName :: Text,
--            _userAddr :: Text
--          }
--
-- 'Jijo.RecordField.TH.makeRecBuilder' \"_user\" ''User
-- @
--
-- It has three fields:
--
-- @
-- 'Field' \"_user\" \"Id\" UUID
-- 'Field' \"_user\" \"Name\" Text
-- 'Field' \"_user\" \"Addr\" Text
-- @
--
-- This allows us to ensure the correct field order during record construction:
--
-- @
-- -- Correct definition (accepted by the compiler)
-- jUser = 'Jijo.Definition.defineJObject' $
--   pure recUser  -- recUser generated by 'Jijo.RecordField.TH.makeRecBuilder'
--     \<*\> 'Jijo.Definition.jField' \@\"Id\"    \"id\"    jUUID
--     \<*\> 'Jijo.Definition.jField' \@\"Name\"  \"name\"  jText
--     \<*\> 'Jijo.Definition.jField' \@\"Email\" \"email\" jText
--
-- -- Erroneous definition (rejected by the compiler)
-- jUser = 'Jijo.Definition.defineJObject' $
--   pure recUser  -- recUser generated by 'Jijo.RecordField.TH.makeRecBuilder'
--     \<*\> 'Jijo.Definition.jField' \@\"Id\"    \"id\"    jUUID
--     \<*\> 'Jijo.Definition.jField' \@\"Email\" \"email\" jText
--     \<*\> 'Jijo.Definition.jField' \@\"Name\"  \"name\"  jText
-- @
module Jijo.RecordField where

import GHC.TypeLits

-- | A named record field:
--
-- @
-- Field \"John Doe\" :: Field \"_user\" \"Name\" String
-- @
--
-- The name and the prefix are phantom type parameters.
newtype Field (prefix :: Symbol) (name :: Symbol) ty = Field ty
